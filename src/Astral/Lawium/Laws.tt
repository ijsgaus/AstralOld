<#@ template language="C#" debug="True" hostSpecific="True"                            #>
<#@ output extension=".generated.cs"                                                   #>

using System;
using System.Linq;
using LanguageExt;
using Microsoft.Extensions.Logging;
using static LanguageExt.Prelude;

namespace Astral.Lawium
{
	public partial class Law
    {
<# 
	for(var i = 1; i < 8; i++)
		for (var j = 1; j < 8; j++)
		{
#>
		public static Law Create<<# for(var i1 = 1; i1 <= i; i1++) {#>TI<#=i1#>, <#}#><# for(var i1 = 1; i1 <= j; i1++) {#>TO<#=i1 < j ? $"{i1}, " : $"{i1}" #><#}#>>(string name, Func<<# for(var i1 = 1; i1 <= i; i1++) {#>TI<#=i1#>, <#}#><#
		    if (j == 1)
		    {
		        #>TO1<#
		    }
		    else
		    {
		        #>(<# for(var k = 1; k < j ; k ++) { #>TO<#=k#>, <# } #>TO<#=j#>)<#
		    }
		
		
		#>> execute)
		{
			Arr<object> Calc(ILogger logger, Arr<object> args)
            {
                <#

                    if (j == 1)
                    {
                        #>object r1 <# 
                        
                    }
                    else
                    {
                        #>var (<#for(var k = 1; k < j; k++) {#>r<#=k#>, <#}#>r<#=j#>) <# 
                    }
                #>= execute(<#
                            for(var k = 1; k < i; k++) {#>(TI<#=k#>) args[<#=k-1#>], <#} 
                            #>(TI<#=i#>) args[<#=i-1#>]);
                
                return Arr.create<object>(<#
                    for(var k = 1; k < j; k++) {#>r<#=k#>, <#}#>r<#=j#>);
			}

			var inArr = Arr.create(<#for(var k = 1; k < i; k++) {#>typeof(TI<#=k#>), <# } #>typeof(TI<#=i#>));
			var outArr = Arr.create(<#for(var k = 1; k < j; k++) {#>typeof(TO<#=k#>), <# } #>typeof(TO<#=j#>));

			return new Law(name, inArr, outArr, Calc);
		}

<#
		}
		#>
		
	}
}
